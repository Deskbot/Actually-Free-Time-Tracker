/**
 * Takes the ambiguous arguments that you might give to `elem` or a tag function
 * and figures out what their types are.
 */
export function distinguishElemArgs([arg1, arg2, arg3]) {
    return distinguishAriamisArgs([arg1, arg2, arg3]);
}
/**
 * A more general version of `distinguishElemArgs`.
 * It lets you use custom types for attributes, listeners, and children and disambiguate them.
 * It assumes the same argument order of ariamis's element creation functions.
 * It assumes the same arguments can be omitted in the same circumstances.
 * It expects attributes and listeners to be objects.
 * It expects the children to be an array.
 */
export function distinguishAriamisArgs([arg1, arg2, arg3]) {
    let attr = {};
    let listeners = {};
    let children = [];
    if (Array.isArray(arg1)) {
        children = arg1;
    }
    else if (arg1 !== undefined) {
        attr = arg1;
    }
    if (Array.isArray(arg2)) {
        children = arg2;
    }
    else if (arg2 !== undefined) {
        listeners = arg2;
    }
    if (arg3 !== undefined) {
        children = arg3;
    }
    return [attr, listeners, children];
}
/**
 * Creates an element. All aspects of the element must be provided.
 */
export function createElement(tag, attrs, listeners, children) {
    const elem = document.createElement(tag);
    for (const key in attrs) {
        // TypeScript complains without this cast. I think this situation is just too complicated for it.
        elem[key] = attrs[key];
    }
    for (const k in listeners) {
        const listener = listeners[k];
        if (typeof listener === "function") {
            elem.addEventListener(k, listener);
        }
        else {
            elem.addEventListener(k, listener.handler, listener.options);
        }
    }
    elem.append(...children);
    return elem;
}
/**
 * Creates an element.
 * Takes a tag name, optionally followed by any of the following sequences:
 * * children
 * * attributes
 * * attributes, children
 * * attributes, listeners
 * * attributes, listeners, children
 */
export function elem(tag, ...elemArgs) {
    return createElement(tag, ...distinguishElemArgs(elemArgs));
}
/**
 * Creates a {@link TagFunc}.
 * i.e. it creates an element creating function with the given tag name baked in.
 */
export function tag(tag) {
    return ((...args) => elem(tag, ...args));
}
